@page "/"
@using System.IO
@using System.Threading
@using System.Globalization
@using System.Text;

@inject IJSRuntime JSRuntime
@*
    Displaying EDF file header information
    @jussivirkkala
    2024-12-01 List of annotations.
    2024-11-30 Annotations testing.
    2024-11-26 Working on annotations.
    2024-11-23 Using .NET9. Possibility to save .edf with new patient information.
    2023-12-10 Checking for header and file size. Local time. Using table layout.
    2023-12-09 Using .NET8 empty template. Uint32. Using System.Globalization for CultureInfo.InvariantCulture
    2022-11-11 for .NET7
    2021-11-09 for .NET6
    2021-10-30 Blazor-EDF
    2021-09-02 Including version information in output
    2021-07-26 overscroll-behavior: none;
    2021-07-25 Corrected size in export. Removed Ctrl+C in file export.
    2021-07-24 Indicating problem with large files. Body overflow-y:hidden.
    2021-07-23 No decimals for fixed sampling rate, length as hh:mm:ss. Displaying modified, size. Two buttons.
    2021-07-22 Adding length, sampling rate to clipboard. Corrected clipboard.
    2021-07-21 Resetting signals. Using ParseTry, download, clipboard.
    2021-07-20 BDF, .ASCII encoding, calculate file duration, sampling rate, check version.
    2021-07-19 Version date. Path www.github.com/jussivirkkala/Blazor.
    2021-07-18 Corrected digital label. Max file size 5 GB, 256 channels.
    2021-07-17 First version.

    https://www.edfplus.info/specs/edf.html
    HEADER RECORD (we suggest to also adopt the 12 simple additional EDF+ speclics)
    8 ascii : version of this data format (0)
    80 ascii : local patient identification (mind item 3 of the additional EDF+ specs)
    80 ascii : local recording identification (mind item 4 of the additional EDF+ specs)
    8 ascii : startdate of recording (dd.mm.yy) (mind item 2 of the additional EDF+ specs)
    8 ascii : starttime of recording (hh.mm.ss)
    8 ascii : number of bytes in header record
    44 ascii : reserved
    8 ascii : number of data records (-1 if unknown, obey item 10 of the additional EDF+ specs)
    8 ascii : duration of a data record, in seconds
    4 ascii : number of signals (ns) in data record
    ns * 16 ascii : ns * label (e.g. EEG Fpz-Cz or Body temp) (mind item 9 of the additional EDF+ specs)
    ns * 80 ascii : ns * transducer type (e.g. AgAgCl electrode)
    ns * 8 ascii : ns * physical dimension (e.g. uV or degreeC)
    ns * 8 ascii : ns * physical minimum (e.g. -500 or 34)
    ns * 8 ascii : ns * physical maximum (e.g. 500 or 40)
    ns * 8 ascii : ns * digital minimum (e.g. -2048)
    ns * 8 ascii : ns * digital maximum (e.g. 2047)
    ns * 80 ascii : ns * prefiltering (e.g. HP:0.1Hz LP:75Hz)
    ns * 8 ascii : ns * nr of samples in each data record
    ns * 32 ascii : ns * reserved
*@

<InputFile id="inputDefault"
           OnChange="OnFileSelection"
           accept=".edf,.rec,.bdf" />
<br>
@if (header != null)
{
    <label>
        Modified: @header.modified 
        <br>File size: @filesize
        @if (filesize > 4294967296)
        {
            <label><br />- large files perhaps not read correctly!</label>
        }
        <br>Calculated size: @calculatedsize
        @if (filesize != calculatedsize)
        {
            <label><br />- does not match with file size, bdf?</label>
        }

        <br>Version: @header.version
        <br>Patient: @header.patient
        <br>Recording: @header.recording
        <br>Start date (dd.mm.yy): @header.startdate
        <br>Start time (hh.mm.ss): @header.starttime
        <br>Header length: @header.headerlength
        <br>Reserved: @header.reserved44
        <br>Data records: @header.records
        <br>Record duration (s): @header.duration
        <br>File duration (HH:mm:ss): @TimeSpan.FromSeconds(header.length).TotalHours.ToString("00"):@TimeSpan.FromSeconds(header.length).ToString(@"mm\:ss")
        <br>Number of signals: @header.signals
        <br>@sError
    </label>
}

@if (signals != null)
{
    <br />
    <button @onclick="CtrlC">Ctrl+C</button>
    <button @onclick="saveFile">@(header?.filename).txt</button>
    <input type="text" maxlength="80" @bind="patient"/><button @onclick="saveEDF">Create (slow) @(patient).edf</button>
    
    <table>
    <tr>
    <td>Label (dimension)</td>
    <td>Transducer type</td>
    <td>Physical min max</td>
    <td>Digital min max</td>
    <td>Prefiltering</td>
    <td>Samples</td>
    <td>Reserved</td>
    <td>Sampling rate (Hz)</td>
    </tr>
    @foreach (var signal in signals)
    {
        <tr>
            <td>@signal.label (@signal.dimension)</td>
            <td>@signal.transducer</td>
            <td>@signal.physicalMin @signal.physicalMax</td>
            <td>@signal.digitalMin @signal.digitalMax</td>
            <td>@signal.prefiltering</td>
            <td>@signal.samples</td>
            <td>@signal.reserved32</td>
            <td>@signal.samplingrate.ToString("0.####", CultureInfo.InvariantCulture)</td>
        </tr>
    }

    </table>
    @if (iAnnotatation1>-1)
    {
    <button @onclick="listAnnotations">List (slow) and @(patient)-annotations.txt</button>
    }
}

@if (edfAnnotations.Count > 0)
{
    <table>
    <tr>
    <td>Start (s)</td>
    <td>Duration (s)</td>
    <td>Label</td>
    </tr>
    @foreach (var annotation in edfAnnotations)
    {
        <tr>
            <td>@annotation.start</td>
            <td>@annotation.duration</td>
            <td>@annotation.label</td>
        </tr>
    }
    </table>
}

<br>
v2024-12-02: .NET9 <a href="https://blazor.net">https://blazor.net</a>  WebAssembly (WASM) app to read EDF
<a href="https://www.edfplus.info/">https://www.edfplus.info/</a> and BDF header information.
 Progressive web app (PWA) for offline use in desktop or mobile browser. File is analyzed locally.
App is hosted at <a href="https://jussivirkkala.github.io/Blazor-EDF/">https://github.com/jussivirkkala/Blazor-EDF</a> and
source code at <a href="https://github.com/jussivirkkala/Blazor-EDF">https://github.com/jussivirkkala/Blazor-EDF</a>. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND...

@code {
    IBrowserFile file = null;
    string @patient="";

    private edfHeader? header ;
    private edfSignal[]? signals;

    List<edfAnnotation> edfAnnotations = new List<edfAnnotation>();

    string sAnnotations="";
    
    string sError="";
    private string txt="";
    private long filesize = 0;

    private long calculatedsize=0;
    private int iAnnotatation1=-1;
    private int iAnnotatation2=0;
    

    public class edfHeader
    {
        public string filename { get; set; } = "";
        public string modified { get; set; } = "";
        public string size { get; set; } = "";
        public string version { get; set; } = "";
        public string patient { get; set; } = "";
        public string recording { get; set; } = "";
        public string startdate { get; set; } = "";
        public string starttime { get; set; } = "";
        public string headerlength { get; set; } = "";
        public string reserved44 { get; set; } = "";
        public string records { get; set; } = "";
        public string duration { get; set; } = "";
        public string signals { get; set; } = "";
        public double length { get; set; } = 0;
    }


    public class edfSignal
    {
        public string label { get; set; } = "";
        public string transducer { get; set; } = "";
        public string dimension { get; set; } = "";
        public string physicalMin { get; set; } = "";
        public string physicalMax { get; set; } = "";
        public string digitalMin { get; set; } = "";
        public string digitalMax { get; set; } = "";
        public string prefiltering { get; set; } = "";
        public string samples { get; set; } = "";
        public string reserved32 { get; set; } = "";
        public double samplingrate { get; set; } = 0;
    }

    public class edfAnnotation
    {
        public string start { get; set; } = "";
        public string duration { get; set; } = "";
        
        public string label { get; set; } = "";
    }

    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        iAnnotatation1=-1;
        edfAnnotations.Clear();
        sError="";


        header = new edfHeader();
        if (signals != null) signals = null;
        file = e.File;
        header.filename = e.File.Name; // 2024-11-23 e.File

        // Header 256 bytes
        var bytes = new byte[256 + 512 * 256]; // Max 512 channels
        int i = 0;
        const long MAXSIZE = 4294967296; // 4 GB, FAT32 limit
        await file.OpenReadStream(MAXSIZE).ReadAsync(bytes, 0, bytes.Length);

        const string LF = "\n"; // 2019-09-02 Remove 
        txt = "v2024-12-02 Reading EDF, BDF header information https://github.com/jussivirkkala/Blazor-EDF" + LF;
        txt += "File\t" + header.filename + LF;
        string s;
        s = file.LastModified.ToLocalTime().ToString("yyyy-MM-ddTHH\\:mm\\:ss");
        header.modified = s;
        txt += "Modified\t" + s + LF;
        filesize = file.Size;
        s = filesize.ToString();
//        header.size = s;
        txt += "File size\t" + s + LF;
        s = System.Text.Encoding.ASCII.GetString(bytes, i, 8); i += 8;
        header.version = s; // BitConverter.ToString(bytes, 0, 8);
        txt += "Version\t" + s + LF;
        if (header.version.CompareTo("0       ") != 0)
        {
            header.version = "Not correct EDF/BDF file";
            return;
        }
        s = System.Text.Encoding.Latin1.GetString(bytes, i, 80); i += 80;
        header.patient = s.TrimEnd(); // 2024-11-23
        patient=header.patient;
        txt += "Patient\t" + s + LF;
        s = System.Text.Encoding.ASCII.GetString(bytes, i, 80); i += 80;
        header.recording = s;
        txt += "Recording\t" + s + LF;
        s = System.Text.Encoding.ASCII.GetString(bytes, i, 8); i += 8;
        header.startdate = s;
        txt += "Start date (dd.mm.yy)\t" + s + LF;
        s = System.Text.Encoding.ASCII.GetString(bytes, i, 8); i += 8;
        header.starttime = s;
        txt += "Start time (hh.mm.ss)\t" + s + LF;
        s = System.Text.Encoding.ASCII.GetString(bytes, i, 8); i += 8;
        header.headerlength = s;
        txt += "Header length\t" + s + LF;
        s = System.Text.Encoding.ASCII.GetString(bytes, i, 44); i += 44;
        header.reserved44 = s;
        txt += "Reserved\t" + s + LF;
        s = System.Text.Encoding.ASCII.GetString(bytes, i, 8); i += 8;
        header.records = s;
        txt += "Records\t" + s + LF;
        s = System.Text.Encoding.ASCII.GetString(bytes, i, 8).TrimEnd(); i += 8;
        header.duration = s;
        txt += "Record duration\t" + s + LF;
        s = System.Text.Encoding.ASCII.GetString(bytes, i, 4); i += 4;
        header.signals = s;
        txt += "Signals\t" + s + LF;
        uint n = UInt32.Parse(s); //
        double duration;
        if (double.TryParse(header.duration, CultureInfo.InvariantCulture, out duration)) 
        {
            uint r = UInt32.Parse(header.records);
            header.length = duration * r;
        }
        else
            header.length = -1;
        txt += "File duration (HH:mm:ss)\t" + TimeSpan.FromSeconds(header.length).TotalHours.ToString("00") + ":" + TimeSpan.FromSeconds(header.length).ToString(@"mm\:ss") + LF;


        signals = new edfSignal[n];
        
        int j;
        for (j = 0; j < n; j += 1)
        {
            signals[j] = new edfSignal();
            signals[j].label = System.Text.Encoding.ASCII.GetString(bytes, i, 16); i += 16;        
        }
        for (j = 0; j < n; j += 1)
        {
            signals[j].transducer = System.Text.Encoding.ASCII.GetString(bytes, i, 80); i += 80;
        }
        for (j = 0; j < n; j += 1)
        {
            signals[j].dimension = System.Text.Encoding.ASCII.GetString(bytes, i, 8).TrimEnd(); i += 8;
        }
        for (j = 0; j < n; j += 1)
        {
            signals[j].physicalMin = System.Text.Encoding.ASCII.GetString(bytes, i, 8); i += 8;
        }
        for (j = 0; j < n; j += 1)
        {
            signals[j].physicalMax = System.Text.Encoding.ASCII.GetString(bytes, i, 8); i += 8;
        }
        for (j = 0; j < n; j += 1)
        {
            signals[j].digitalMin = System.Text.Encoding.ASCII.GetString(bytes, i, 8); i += 8;
        }
        for (j = 0; j < n; j += 1)
        {
            signals[j].digitalMax = System.Text.Encoding.ASCII.GetString(bytes, i, 8); i += 8;
        }
        for (j = 0; j < n; j += 1)
        {
            signals[j].prefiltering = System.Text.Encoding.ASCII.GetString(bytes, i, 80); i += 80;
        }
        calculatedsize=0;
        for (j = 0; j < n; j += 1)
        {
            signals[j].samples = System.Text.Encoding.ASCII.GetString(bytes, i, 8).TrimEnd(); i += 8;
            signals[j].samplingrate = UInt32.Parse(signals[j].samples) / duration;
            if (signals[j].label.Trim().Equals("EDF Annotations"))
            {
                if (j < (n-1))
                {
                    sError+="Skipped non last EDF Annotation trace, ";
                }
                else 
                {
                    iAnnotatation1=(int) calculatedsize;
                    iAnnotatation2=(int) UInt32.Parse(signals[j].samples)*2;
                }
            }
            calculatedsize+= UInt32.Parse(signals[j].samples)*2;
        }
        // 2024-11-30 Moved *2 above
        calculatedsize=calculatedsize*UInt32.Parse(header.records)+UInt32.Parse(header.headerlength);
        for (j = 0; j < n; j += 1)
        {
            signals[j].reserved32 = System.Text.Encoding.ASCII.GetString(bytes, i, 32); i += 32;
        }
        txt += "Label\tTransducer\tDimension\tPhysicalMin\tPhysicalMax\tDigitalMin\tDigitalMax\tPrefiltering\tSamples\tReserved\tSamplingRate" + LF;
        for (j = 0; j < n; j += 1)
        {
            txt += signals[j].label.TrimEnd() + "\t" + signals[j].transducer.TrimEnd() + "\t" + signals[j].dimension.TrimEnd() + "\t" + signals[j].physicalMin.TrimEnd() + "\t" + signals[j].physicalMax.TrimEnd() + "\t" +
                signals[j].digitalMin.TrimEnd() + "\t" + signals[j].digitalMax.TrimEnd() + "\t" + signals[j].prefiltering.TrimEnd() + "\t" + signals[j].samples.TrimEnd() + "\t" + signals[j].reserved32.TrimEnd() + "\t" +
                signals[j].samplingrate.ToString("0.####", CultureInfo.InvariantCulture) + LF; 
        }
    }

/*

https://www.edfplus.info/specs/edfplus.html

2.2.2. Time-stamped Annotations Lists (TALs) in an 'EDF Annotations' signal

Text, time-keeping, events and stimuli are coded as text annotations in this 'EDF Annotations' signal.  The annotations 
are listed in Time-stamped Annotations Lists (TALs) as follows.
...
Duration must not contain any '+' or '-' and specifies the duration of the annotated event in seconds. If such a 
specification is not relevant, Duration can be skipped in which case its preceding 21 must also be skipped. Both 
Onset and Duration can contain a dot ('.') but only if the fraction of a second is specified (up to arbitrary accuracy).
...
So the TAL ends with a 20 followed by a 0.
...

2.2.4 Time keeping of data records
...
The startdate/time of a file is specified in the EDF+ header fields 'startdate of recording' and 'starttime of recording'. 
These fields must indicate the absolute second in which the start of the first data record falls. So, the first TAL in the
 first data record always starts with +0.X2020, indicating that the first data record starts a fraction, X, of a second 
 after the startdate/time that is specified in the EDF+ header. If X=0, then the .X may be omitted.

Each TAL starts with a time stamp Onset 21 Duration 20 in which 21 and 20 are single bytes with value 21 and 20

, the first TAL in the first data record always starts with +0.X2020,
So, the first TAL in the first data record always starts with +0.X 20 20

...
For example, if the technician switches off the lights and closes the door 3 minutes after startdate/time, this can 
be stored as the 28-bytes TAL '+180 20 Lights off 20 Close door 20 0' without the quotes. Alternatively, the two events 
can be stored as two separate shorter TALs '+180 20 Lights off 20 0 +180 20 Close door 20 0', also without the quotes. The 
TAL '+1800.2 21 25.5 20 Apnea 20 0' codes a 25.5s apnea that begins 30 minutes and 0.2s after starttime

*/
    public async void listAnnotations()
    {
        const long MAXSIZE = 4294967296;
        using var fileStream =  file.OpenReadStream(MAXSIZE);

        // Seek past header, signal headers
    
        var buffer1 = new byte[UInt32.Parse(header.headerlength)+iAnnotatation1];
        await fileStream.ReadAsync(buffer1, 0, Int32.Parse(header.headerlength)+iAnnotatation1);


        // Read annotation
        var buffer2 = new byte[iAnnotatation2];
        int bytesRead;
        string a="",start="",duration="",label="";
        int j1=0;
        string txt2="Start (s)\tDuration (s)\tLabel\n";
        while ((bytesRead = await fileStream.ReadAsync(buffer2, 0, iAnnotatation2)) > 0)
        {
            for (int j=0; j < iAnnotatation2; j++)
            {
            switch (buffer2[j])
            {   
                case 0: // end with 0
                    if (start.Length>0)
                    {
                        edfAnnotation annotation=new edfAnnotation();
                        annotation.start=start;
                        annotation.duration=duration;
                        annotation.label=label;                    
                        label=label.Replace("\r","#");
                        label=label.Replace("\n","#");
                        edfAnnotations.Add(annotation);
                        txt2 +=start+"\t"+duration+"\t"+label+"\n";
                        start="";
                        duration="";
                        label="";
                    }
                    else 
                        j=iAnnotatation2;
                    break;

                case 20: // 
                    if (start=="")
                    { // 20 before 21 when no duration
                        start=System.Text.Encoding.UTF8.GetString(buffer2,j1,j-j1); // a
                        a="";
                    }
                    else
                    {   
                        if (duration=="") // 20 after duration or in end of label 
                            {
                                if (a=="") 
                                    duration=a;
                                else
                                    duration=System.Text.Encoding.UTF8.GetString(buffer2,j1,j-j1);
                            }
                        else
                            {
                                if (a=="") 
                                    label=a;
                                else
                                    label=System.Text.Encoding.UTF8.GetString(buffer2,j1,j-j1);;
                            }
                        a="";
                    }
                    break;
                case 21: // first 21 when duration
                    start=a;
                    a="";
                    break;
                default:                
                    if (a=="")
                        j1=j;
                    a+= System.Text.Encoding.UTF8.GetString(buffer2,j,1);
                    break;

            }
            }

            // If EDF Annotation is not last (NOT IMPLEMENTED)     
            // Seek past other channels data in block
            await fileStream.ReadAsync(buffer1, 0, iAnnotatation1);
         
        }        
        fileStream.Close();
        StateHasChanged();
        await JSRuntime.InvokeAsync<object>("saveFile", header?.filename + "-annotations.txt", txt2);

    }

    public async void listAnnotations2()
    {
        sAnnotations="";
        edfAnnotations.Clear();

        Int32 pos=Int32.Parse(header.headerlength)+iAnnotatation1; // +0*28*250*2+27*250*2;

        sError=iAnnotatation1.ToString();
        const long MAXSIZE = 4294967296;
        using var fileStream =  file.OpenReadStream(MAXSIZE);


        using var memoryStream = new MemoryStream();
        // Copy the file content into memory
        await fileStream.CopyToAsync(memoryStream);

        // Modify specific bytes
        var data =(memoryStream.ToArray());

        string a="",start="",duration="",label="";
        for (int r=0;r<10;r++)
        {
        for (int l=0; l<2000; l++)
        {
                //    sError+= data[pos+l].ToString()+" ";

            switch (data[pos+l])
            {   




                case 0: // end with 0
                    if (start.Length>0)
                    {
                        edfAnnotation annotation=new edfAnnotation();
                        annotation.start=start;
                        annotation.duration=duration;
                        annotation.label=label;
                        edfAnnotations.Add(annotation);
//                    sAnnotations+=s+","+d+","+t+" - ";
                        start="";
                        duration="";
                        label="";
                    }
                break;

                case 20: // 
                    if (start=="")
                    { // 20 before 21 when no duration
                        start=a;
                        a="";
                    }
                    else
                    {   
                        if (duration=="") // 20 after duration or in end of label 
                            duration=a;
                        else
                             label=a;

                        a="";
                    }
                    break;


                case 21: // first 21 when duration
                    start=a;
                    a="";
                    break;

                default:                
                    a+= System.Text.Encoding.UTF8.GetString(data,pos+l,1);
                    break;
            }
            
        }
        pos+=iAnnotatation1+2000;
        }


    // sAnnotations+="End";
    StateHasChanged();
    }


    // https://www.syncfusion.com/faq/blazor/general/how-do-i-generate-and-save-a-file-client-side-using-blazor
    public async void saveFile()
    {
        await JSRuntime.InvokeAsync<object>("saveFile", header?.filename + ".txt", txt
            );
    }
    
    public async void CtrlC() 
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", txt); 

    }

    public async void saveEDF()
    {
        const long MAXSIZE = 4294967296;
        using var fileStream =  file.OpenReadStream(MAXSIZE);


        // Prepare the data to modify (80 bytes of padded patient name)
        string newPatient = patient.PadRight(80, ' ');
        byte[] replacementBytes = Encoding.UTF8.GetBytes(newPatient);

        const int bufferSize = 512*256;  
        using var tempStream = new FileStream("Blazor-EDF.edf", FileMode.Create, FileAccess.ReadWrite);

        // Process the file in chunks
        byte[] buffer = new byte[bufferSize];
        int bytesRead;
        long currentPosition = 0;

        while ((bytesRead = await fileStream.ReadAsync(buffer, 0, buffer.Length)) > 0)
        {
            // Modify bytes at the specified offset
            if (currentPosition == 0) 
            {
                Array.Copy(replacementBytes, 0, buffer, 8,80);
            }

            // Write the processed chunk to the temporary file
            await tempStream.WriteAsync(buffer, 0, bytesRead);
            currentPosition += bytesRead;
        }

        // Reset the stream position for further use (e.g., download) 
        tempStream.Seek(0, SeekOrigin.Begin);

        var streamRef = new DotNetStreamReference(tempStream);

        // Call JavaScript to handle the file download
        await JSRuntime.InvokeVoidAsync("saveStream", streamRef, $"{patient}.edf");
        return;

        // Out of memory 2
        //
        using var memoryStream = new MemoryStream();

        // Copy the file content into memory
        await fileStream.CopyToAsync(memoryStream);

        // Modify specific bytes
        var modifiedData =(memoryStream.ToArray());
        string newpatient=patient.PadRight(80,' ');
        byte[] bytes = Encoding.UTF8.GetBytes(newpatient);
        Array.Copy(bytes,0,modifiedData,8,80);

        // Create a new memory stream for the modified data
        using var modifiedStream = new MemoryStream(modifiedData);

       //  var streamRef = new DotNetStreamReference(modifiedStream);

        // Call JavaScript to handle the file download
        await JSRuntime.InvokeVoidAsync("saveStream", streamRef, patient+".edf" );
        return;

        // Out of memory 1
        //
        // var bytes = new byte[filesize]; 
        await file.OpenReadStream(MAXSIZE).ReadAsync(bytes, 0, (int) filesize);
        string base64String = Convert.ToBase64String(bytes);
        await JSRuntime.InvokeAsync<object>("saveBinary", header.filename , base64String);
        return;
    }

}

@* End *@